// <auto-generated />
using System;
using BgFishingPlaces.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BgFishingPlaces.Database.Migrations
{
    [DbContext(typeof(BgFishingPlacesDbContext))]
    [Migration("20210531191247_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaitFish", b =>
                {
                    b.Property<int>("BaitsBaitId")
                        .HasColumnType("int");

                    b.Property<Guid>("FishesFishId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BaitsBaitId", "FishesFishId");

                    b.HasIndex("FishesFishId");

                    b.ToTable("BaitFish");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Bait", b =>
                {
                    b.Property<int>("BaitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.HasKey("BaitId");

                    b.ToTable("Baits");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Fish", b =>
                {
                    b.Property<Guid>("FishId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FishName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("FishId");

                    b.ToTable("Fishes");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Picture", b =>
                {
                    b.Property<Guid>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BaitId")
                        .HasColumnType("int");

                    b.Property<int?>("FishId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("PictureExtension")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("ReservoirId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserAddedId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PictureId");

                    b.HasIndex("BaitId")
                        .IsUnique()
                        .HasFilter("[BaitId] IS NOT NULL");

                    b.HasIndex("ReservoirId");

                    b.HasIndex("UserAddedId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Reservoir", b =>
                {
                    b.Property<Guid>("ReservoirId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalCounter")
                        .HasColumnType("int");

                    b.Property<string>("CreatedOn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("ReservoirAddress")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ReservoirCoordinates")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ReservoirDescription")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ReservoirName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SavedReservoirUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ReservoirId");

                    b.HasIndex("AddedByUserId");

                    b.HasIndex("SavedReservoirUserId");

                    b.ToTable("Reservoirs");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f4d859f-74fc-49e2-8b7e-7040fba11d55"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.SimilarName", b =>
                {
                    b.Property<int>("SimilarNameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BaitId")
                        .HasColumnType("int");

                    b.Property<Guid?>("FishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ReservoirId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SimilarNameId");

                    b.HasIndex("BaitId");

                    b.HasIndex("FishId");

                    b.HasIndex("ReservoirId");

                    b.ToTable("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishReservoir", b =>
                {
                    b.Property<Guid>("FishesFishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservoirsReservoirId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FishesFishId", "ReservoirsReservoirId");

                    b.HasIndex("ReservoirsReservoirId");

                    b.ToTable("FishReservoir");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("BaitFish", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Bait", null)
                        .WithMany()
                        .HasForeignKey("BaitsBaitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", null)
                        .WithMany()
                        .HasForeignKey("FishesFishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Picture", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Bait", "Bait")
                        .WithOne("Picture")
                        .HasForeignKey("BgFishingPlaces.Database.Entities.Picture", "BaitId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", "Fish")
                        .WithMany("Pictures")
                        .HasForeignKey("PictureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.Reservoir", "Reservoir")
                        .WithMany("Pictures")
                        .HasForeignKey("ReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.User", "UserAdded")
                        .WithMany("PicturesAddedByUser")
                        .HasForeignKey("UserAddedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bait");

                    b.Navigation("Fish");

                    b.Navigation("Reservoir");

                    b.Navigation("UserAdded");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Reservoir", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.User", "AddedByUser")
                        .WithMany("ReservoirsAdded")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.User", "SavedReservoirByUser")
                        .WithMany("SavedReservoirs")
                        .HasForeignKey("SavedReservoirUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AddedByUser");

                    b.Navigation("SavedReservoirByUser");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.SimilarName", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Bait", "Bait")
                        .WithMany("SimilarNames")
                        .HasForeignKey("BaitId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", "Fish")
                        .WithMany("SimilarNames")
                        .HasForeignKey("FishId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Reservoir", "Reservoir")
                        .WithMany("SimilarNames")
                        .HasForeignKey("ReservoirId");

                    b.Navigation("Bait");

                    b.Navigation("Fish");

                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("FishReservoir", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", null)
                        .WithMany()
                        .HasForeignKey("FishesFishId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.Reservoir", null)
                        .WithMany()
                        .HasForeignKey("ReservoirsReservoirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Bait", b =>
                {
                    b.Navigation("Picture");

                    b.Navigation("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Fish", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Reservoir", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.User", b =>
                {
                    b.Navigation("PicturesAddedByUser");

                    b.Navigation("ReservoirsAdded");

                    b.Navigation("SavedReservoirs");
                });
#pragma warning restore 612, 618
        }
    }
}
