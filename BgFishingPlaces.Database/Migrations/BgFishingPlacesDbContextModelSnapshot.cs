// <auto-generated />
using System;
using BgFishingPlaces.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BgFishingPlaces.Database.Migrations
{
    [DbContext(typeof(BgFishingPlacesDbContext))]
    partial class BgFishingPlacesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaitFish", b =>
                {
                    b.Property<Guid>("BaitsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FishesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BaitsId", "FishesId");

                    b.HasIndex("FishesId");

                    b.ToTable("BaitFish");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Coordinates")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Street")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("StreetNumber")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Bait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Baits");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Fish", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.HasKey("Id");

                    b.ToTable("Fishes");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BaitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<Guid?>("FishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ReservoirId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BaitId");

                    b.HasIndex("FishId");

                    b.HasIndex("ReservoirId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Reservoir", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ApprovalCounter")
                        .HasColumnType("int");

                    b.Property<string>("CreatedOn")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Reservoirs");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f4d859f-74fc-49e2-8b7e-7040fba11d55"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.SimilarName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FishId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ReservoirId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FishId");

                    b.HasIndex("ReservoirId");

                    b.ToTable("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProfilePictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("ProfilePictureId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FishReservoir", b =>
                {
                    b.Property<Guid>("FishesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservoirsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FishesId", "ReservoirsId");

                    b.HasIndex("ReservoirsId");

                    b.ToTable("FishReservoir");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("BaitFish", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Bait", null)
                        .WithMany()
                        .HasForeignKey("BaitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", null)
                        .WithMany()
                        .HasForeignKey("FishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Picture", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Bait", null)
                        .WithMany("Pictures")
                        .HasForeignKey("BaitId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", null)
                        .WithMany("Pictures")
                        .HasForeignKey("FishId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Reservoir", null)
                        .WithMany("Pictures")
                        .HasForeignKey("ReservoirId");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Reservoir", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Address", "Address")
                        .WithOne("Reservoir")
                        .HasForeignKey("BgFishingPlaces.Database.Entities.Reservoir", "AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.User", null)
                        .WithMany("AddedReservoirs")
                        .HasForeignKey("UserId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.SimilarName", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", null)
                        .WithMany("SimilarNames")
                        .HasForeignKey("FishId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Reservoir", null)
                        .WithMany("SimilarNames")
                        .HasForeignKey("ReservoirId");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.User", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("BgFishingPlaces.Database.Entities.Picture", "ProfilePicture")
                        .WithMany()
                        .HasForeignKey("ProfilePictureId");

                    b.Navigation("Address");

                    b.Navigation("ProfilePicture");
                });

            modelBuilder.Entity("FishReservoir", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Fish", null)
                        .WithMany()
                        .HasForeignKey("FishesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.Reservoir", null)
                        .WithMany()
                        .HasForeignKey("ReservoirsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("BgFishingPlaces.Database.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BgFishingPlaces.Database.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Address", b =>
                {
                    b.Navigation("Reservoir");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Bait", b =>
                {
                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Fish", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.Reservoir", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("SimilarNames");
                });

            modelBuilder.Entity("BgFishingPlaces.Database.Entities.User", b =>
                {
                    b.Navigation("AddedReservoirs");
                });
#pragma warning restore 612, 618
        }
    }
}
